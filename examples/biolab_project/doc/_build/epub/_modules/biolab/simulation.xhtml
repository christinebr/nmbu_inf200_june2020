<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>biolab.simulation</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for biolab.simulation</h1><div class="highlight"><pre>
<span></span><span class="c1"># -*- coding: utf-8 -*-</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Implements a complete simulation.</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">.laboratory</span> <span class="k">import</span> <span class="n">Lab</span>
<span class="kn">from</span> <span class="nn">.bacteria</span> <span class="k">import</span> <span class="n">Bacteria</span>


<div class="viewcode-block" id="Sim"><a class="viewcode-back" href="../../sim_and_lab.xhtml#biolab.simulation.Sim">[docs]</a><span class="k">class</span> <span class="nc">Sim</span><span class="p">:</span>
    <span class="sd">&quot;&quot;&quot;Define and perform a simulation.&quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_dishes</span><span class="p">,</span> <span class="n">n_a</span><span class="p">,</span> <span class="n">n_b</span><span class="p">,</span> <span class="n">seed</span><span class="p">,</span> <span class="n">p_dth</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">p_div</span><span class="o">=</span><span class="mf">0.1</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        n_dishes : int</span>
<span class="sd">            number of Petri dishes in lab</span>
<span class="sd">        n_a : int</span>
<span class="sd">            number of bacteria of type A per dish</span>
<span class="sd">        n_b : int</span>
<span class="sd">            number of bacteria of type B per dish</span>
<span class="sd">        seed : int</span>
<span class="sd">            random seed</span>
<span class="sd">        p_dth : float</span>
<span class="sd">            death probability per cycle</span>
<span class="sd">        p_div : float</span>
<span class="sd">            division probability per cycle</span>
<span class="sd">        &quot;&quot;&quot;</span>

        <span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
        <span class="n">Bacteria</span><span class="o">.</span><span class="n">set_params</span><span class="p">({</span><span class="s1">&#39;p_death&#39;</span><span class="p">:</span> <span class="n">p_dth</span><span class="p">,</span>
                             <span class="s1">&#39;p_divide&#39;</span><span class="p">:</span> <span class="n">p_div</span><span class="p">})</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">lab</span> <span class="o">=</span> <span class="n">Lab</span><span class="p">(</span><span class="n">n_dishes</span><span class="p">,</span> <span class="n">n_a</span><span class="p">,</span> <span class="n">n_b</span><span class="p">)</span>

<div class="viewcode-block" id="Sim.run"><a class="viewcode-back" href="../../sim_and_lab.xhtml#biolab.simulation.Sim.run">[docs]</a>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cycles</span><span class="p">,</span> <span class="n">report_cycles</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">return_counts</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;</span>
<span class="sd">        Run simulation for given number of cycles.</span>

<span class="sd">        Parameters</span>
<span class="sd">        ----------</span>
<span class="sd">        cycles : int</span>
<span class="sd">            number of cycles to simulate</span>
<span class="sd">        report_cycles : int</span>
<span class="sd">            interval between status information updates (== 0: no output)</span>
<span class="sd">        return_counts : int</span>
<span class="sd">            if True, return population counts</span>
<span class="sd">        Returns</span>
<span class="sd">        -------</span>
<span class="sd">        None or tuple</span>
<span class="sd">            If return of counts is requested, a tuple (cycle, nA, nB)</span>
<span class="sd">        &quot;&quot;&quot;</span>

        <span class="n">disp</span> <span class="o">=</span> <span class="n">report_cycles</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">return_counts</span>

        <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">empty</span><span class="p">((</span><span class="n">cycles</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
            <span class="n">data</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">cycles</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">bacteria_counts</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="kc">None</span>

        <span class="k">if</span> <span class="n">disp</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Start:&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">bacteria_counts</span><span class="p">())</span>

        <span class="k">for</span> <span class="n">cycle</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cycles</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">cycle</span><span class="p">()</span>
            <span class="n">disp_this_cycle</span> <span class="o">=</span> <span class="n">disp</span> <span class="ow">and</span> <span class="n">cycle</span> <span class="o">%</span> <span class="n">report_cycles</span> <span class="o">==</span> <span class="mi">0</span>

            <span class="k">if</span> <span class="n">ret</span> <span class="ow">or</span> <span class="n">disp_this_cycle</span><span class="p">:</span>
                <span class="n">n_a</span><span class="p">,</span> <span class="n">n_b</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">bacteria_counts</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
                <span class="n">data</span><span class="p">[</span><span class="n">cycle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:]</span> <span class="o">=</span> <span class="n">n_a</span><span class="p">,</span> <span class="n">n_b</span>
            <span class="k">if</span> <span class="n">disp_this_cycle</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="n">n_a</span><span class="p">,</span> <span class="n">n_b</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">disp</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;End: &#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">lab</span><span class="o">.</span><span class="n">bacteria_counts</span><span class="p">())</span>

        <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span></div></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>